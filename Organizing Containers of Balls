#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*, int*);

int parse_int(char*);

// Comparator for qsort of long long
int cmp(const void* a, const void* b) {
    long long x = *(long long*)a;
    long long y = *(long long*)b;
    if (x < y) return -1;
    if (x > y) return 1;
    return 0;
}

/*
 * Complete the 'organizingContainers' function below.
 */
char* organizingContainers(int container_rows, int container_columns, int** container) {
    int n = container_rows;
    long long rowSum[n];
    long long colSum[n];

    for (int i = 0; i < n; i++) rowSum[i] = 0;
    for (int j = 0; j < n; j++) colSum[j] = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            rowSum[i] += container[i][j];
            colSum[j] += container[i][j];
        }
    }

    qsort(rowSum, n, sizeof(long long), cmp);
    qsort(colSum, n, sizeof(long long), cmp);

    for (int i = 0; i < n; i++) {
        if (rowSum[i] != colSum[i]) return "Impossible";
    }
    return "Possible";
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int q = parse_int(ltrim(rtrim(readline())));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        int n = parse_int(ltrim(rtrim(readline())));

        int** container = malloc(n * sizeof(int*));

        for (int i = 0; i < n; i++) {
            container[i] = malloc(n * sizeof(int));
            int col_count = 0;
            char** container_item_temp = split_string(rtrim(readline()), &col_count);

            for (int j = 0; j < n; j++) {
                container[i][j] = parse_int(container_item_temp[j]);
            }

            free(container_item_temp); 
        }

        char* result = organizingContainers(n, n, container);
        fprintf(fptr, "%s\n", result);

        for (int i = 0; i < n; i++) free(container[i]);
        free(container);
    }

    fclose(fptr);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) { data = '\0'; break; }
    }

    if (data[data_length - 1] == '\n') data[data_length - 1] = '\0';
    return data;
}

char* ltrim(char* str) {
    while (*str && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str, int* count) {
    char** splits = NULL;
    *count = 0;

    char* token = strtok(str, " ");
    while (token) {
        splits = realloc(splits, sizeof(char*) * (*count + 1));
        splits[*count] = token;
        (*count)++;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
